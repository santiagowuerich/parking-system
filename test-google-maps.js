#!/usr/bin/env node

/**
 * Script de verificaci√≥n de Google Maps
 * Ejecuta: node test-google-maps.js
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ Verificando configuraci√≥n de Google Maps...\n');

// Verificar si existe .env.local
const envPath = path.join(__dirname, '.env.local');
const envExists = fs.existsSync(envPath);

if (!envExists) {
    console.log('‚ùå No se encontr√≥ el archivo .env.local');
    console.log('üí° Ejecuta: node setup-google-maps.js TU_API_KEY_REAL');
    process.exit(1);
}

console.log('‚úÖ Archivo .env.local encontrado');

// Leer contenido del archivo
let envContent;
try {
    envContent = fs.readFileSync(envPath, 'utf8');
} catch (error) {
    console.log('‚ùå Error leyendo .env.local:', error.message);
    process.exit(1);
}

// Verificar variables de entorno
const hasGoogleMapsKey = envContent.includes('GOOGLE_MAPS_API_KEY=');
const hasNextPublicKey = envContent.includes('NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=');

if (!hasGoogleMapsKey) {
    console.log('‚ùå Falta GOOGLE_MAPS_API_KEY en .env.local');
    console.log('üí° Agrega: GOOGLE_MAPS_API_KEY=tu_api_key_real');
}

if (!hasNextPublicKey) {
    console.log('‚ùå Falta NEXT_PUBLIC_GOOGLE_MAPS_API_KEY en .env.local');
    console.log('üí° Agrega: NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=tu_api_key_real');
}

if (hasGoogleMapsKey && hasNextPublicKey) {
    console.log('‚úÖ Variables de entorno configuradas');

    // Verificar que no sean placeholders
    const lines = envContent.split('\n');
    let apiKey = '';

    for (const line of lines) {
        if (line.startsWith('GOOGLE_MAPS_API_KEY=')) {
            apiKey = line.split('=')[1];
            break;
        }
    }

    if (apiKey === 'TU_API_KEY_REAL' || apiKey === 'TU_API_KEY_AQUI' || apiKey === '') {
        console.log('‚ö†Ô∏è  API key parece ser un placeholder');
        console.log('üí° Reemplaza con tu API key real de Google Maps');
        console.log('üîó Obt√©n tu API key en: https://console.cloud.google.com/google/maps-apis');
    } else {
        console.log('‚úÖ API key configurada (parece ser real)');
        console.log('üéâ ¬°Configuraci√≥n completa!');
        console.log('\nüìã Pr√≥ximos pasos:');
        console.log('1. Reinicia tu servidor: npm run dev');
        console.log('2. Ve a /google-maps-setup para probar la API key');
        console.log('3. Configura la ubicaci√≥n de tu estacionamiento');
    }
}

console.log('\nüîç Verificando archivos del proyecto...');

// Verificar archivos cr√≠ticos
const criticalFiles = [
    'components/google-map.tsx',
    'components/parking-config.tsx',
    'app/google-maps-setup/page.tsx',
    'app/api/google-maps/setup/route.ts',
    'app/api/geocoding/search/route.ts'
];

let allFilesExist = true;
for (const file of criticalFiles) {
    if (fs.existsSync(path.join(__dirname, file))) {
        console.log(`‚úÖ ${file}`);
    } else {
        console.log(`‚ùå ${file} - NO ENCONTRADO`);
        allFilesExist = false;
    }
}

if (allFilesExist) {
    console.log('\nüéâ ¬°Todos los archivos necesarios est√°n presentes!');
    console.log('\nüöÄ Funcionalidades disponibles:');
    console.log('   ‚Ä¢ ‚úÖ Google Maps con mapas interactivos');
    console.log('   ‚Ä¢ ‚úÖ Configuraci√≥n autom√°tica de API key');
    console.log('   ‚Ä¢ ‚úÖ B√∫squeda de direcciones');
    console.log('   ‚Ä¢ ‚úÖ Autocompletado inteligente en tiempo real');
    console.log('   ‚Ä¢ ‚úÖ Navegaci√≥n por teclado');
    console.log('   ‚Ä¢ ‚úÖ Coordenadas GPS autom√°ticas');
} else {
    console.log('\n‚ö†Ô∏è  Algunos archivos faltan. Revisa la instalaci√≥n.');
}

console.log('\nüìö Para m√°s informaci√≥n, lee: GOOGLE_MAPS_README.md');
