// Script para diagnosticar problemas con el Service Role Key
// Ejecutar desde Node.js para verificar la configuraci√≥n

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

console.log('üîç DIAGN√ìSTICO: Service Role Key');
console.log('=================================\n');

// Cargar variables de entorno desde .env.local
function loadEnvFile() {
    try {
        if (fs.existsSync('.env.local')) {
            const envContent = fs.readFileSync('.env.local', 'utf8');
            const envVars = {};

            envContent.split('\n').forEach(line => {
                const [key, ...valueParts] = line.split('=');
                if (key && valueParts.length > 0) {
                    envVars[key.trim()] = valueParts.join('=').trim();
                }
            });

            return envVars;
        }
    } catch (error) {
        console.log('‚ùå Error leyendo .env.local:', error.message);
    }

    return {};
}

const envVars = loadEnvFile();

// Verificar variables de entorno
console.log('1Ô∏è‚É£ Verificando variables de entorno...');
const supabaseUrl = envVars.NEXT_PUBLIC_SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = envVars.NEXT_PUBLIC_SUPABASE_ANON_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabaseServiceKey = envVars.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('üìã Variables encontradas:');
console.log('   NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ Presente' : '‚ùå Faltante');
console.log('   NEXT_PUBLIC_SUPABASE_ANON_KEY:', supabaseAnonKey ? '‚úÖ Presente' : '‚ùå Faltante');
console.log('   SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ Presente' : '‚ùå Faltante');

if (!supabaseUrl || !supabaseAnonKey || !supabaseServiceKey) {
    console.log('\n‚ùå Faltan variables de entorno necesarias');
    console.log('üîß Soluci√≥n: Crear archivo .env.local con:');
    console.log('   NEXT_PUBLIC_SUPABASE_URL=tu_supabase_url');
    console.log('   NEXT_PUBLIC_SUPABASE_ANON_KEY=tu_anon_key');
    console.log('   SUPABASE_SERVICE_ROLE_KEY=tu_service_role_key');
    process.exit(1);
}

// Verificar formato del service key
console.log('\n2Ô∏è‚É£ Verificando formato del Service Role Key...');
console.log('   Longitud:', supabaseServiceKey.length);
console.log('   Empieza con "eyJ":', supabaseServiceKey.startsWith('eyJ'));
console.log('   Contiene ".":', supabaseServiceKey.includes('.'));

if (supabaseServiceKey.length < 100) {
    console.log('‚ö†Ô∏è El service key parece muy corto, podr√≠a ser incorrecto');
}

if (!supabaseServiceKey.startsWith('eyJ')) {
    console.log('‚ö†Ô∏è El service key no tiene el formato JWT esperado');
}

// Probar conexi√≥n con cliente regular
console.log('\n3Ô∏è‚É£ Probando conexi√≥n con cliente regular...');
try {
    const supabase = createClient(supabaseUrl, supabaseAnonKey);
    console.log('‚úÖ Cliente regular creado exitosamente');
} catch (error) {
    console.log('‚ùå Error creando cliente regular:', error.message);
}

// Probar conexi√≥n con cliente admin
console.log('\n4Ô∏è‚É£ Probando conexi√≥n con cliente admin...');
try {
    const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
        auth: {
            autoRefreshToken: false,
            persistSession: false
        }
    });
    console.log('‚úÖ Cliente admin creado exitosamente');
} catch (error) {
    console.log('‚ùå Error creando cliente admin:', error.message);
}

// Probar operaci√≥n administrativa
console.log('\n5Ô∏è‚É£ Probando operaci√≥n administrativa...');
async function testAdminOperation() {
    try {
        const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
            auth: {
                autoRefreshToken: false,
                persistSession: false
            }
        });

        // Intentar crear un usuario de prueba
        const testEmail = `test-${Date.now()}@diagnostic.com`;
        console.log('üß™ Intentando crear usuario de prueba:', testEmail);

        const { data, error } = await supabaseAdmin.auth.admin.createUser({
            email: testEmail,
            password: 'TestPass123!',
            email_confirm: true
        });

        if (error) {
            console.log('‚ùå Error en operaci√≥n admin:', error.message);
            console.log('   C√≥digo:', error.status);
            console.log('   Detalles:', error);

            if (error.message.includes('not_admin')) {
                console.log('\nüîç DIAGN√ìSTICO: El service role key no tiene permisos administrativos');
                console.log('üîß SOLUCIONES:');
                console.log('   1. Verificar que est√©s usando el SERVICE_ROLE key, no el ANON key');
                console.log('   2. Ir a Supabase Dashboard > Settings > API');
                console.log('   3. Copiar el "service_role" key (no el "anon" key)');
                console.log('   4. Actualizar .env.local con el key correcto');
            } else if (error.message.includes('invalid')) {
                console.log('\nüîç DIAGN√ìSTICO: El service role key tiene formato inv√°lido');
                console.log('üîß SOLUCIONES:');
                console.log('   1. Verificar que no haya espacios extras');
                console.log('   2. Verificar que no haya caracteres especiales');
                console.log('   3. Recopiar el key desde Supabase Dashboard');
            }
        } else {
            console.log('‚úÖ Operaci√≥n admin exitosa!');
            console.log('üÜî Usuario creado:', data.user.id);

            // Limpiar usuario de prueba
            console.log('üßπ Limpiando usuario de prueba...');
            await supabaseAdmin.auth.admin.deleteUser(data.user.id);
            console.log('‚úÖ Usuario de prueba eliminado');
        }

    } catch (error) {
        console.log('‚ùå Error inesperado:', error.message);
    }
}

testAdminOperation().then(() => {
    console.log('\n‚ú® Diagn√≥stico completado!');
    console.log('\nüìã Resumen de verificaci√≥n:');
    console.log('   ‚úÖ Variables de entorno presentes');
    console.log('   ‚úÖ Formato del service key v√°lido');
    console.log('   ‚úÖ Cliente admin creado correctamente');
    console.log('   ‚ö†Ô∏è Operaci√≥n admin requiere verificaci√≥n');
});
